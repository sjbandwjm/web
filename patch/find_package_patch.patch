diff --git a/CMakeLists.txt b/CMakeLists.txt
index 057695af..76792570 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -24,7 +24,7 @@ option(DEBUG "Print debug logs" OFF)
 option(WITH_DEBUG_SYMBOLS "With debug symbols" ON)
 option(WITH_THRIFT "With thrift framed protocol supported" OFF)
 option(BUILD_UNIT_TESTS "Whether to build unit tests" OFF)
-option(DOWNLOAD_GTEST "Download and build a fresh copy of googletest. Requires Internet access." ON)
+option(DOWNLOAD_GTEST "Download and build a fresh copy of googletest. Requires Internet access." OFF)
 
 # Enable MACOSX_RPATH. Run "cmake --help-policy CMP0042" for policy details.
 if(POLICY CMP0042)
@@ -75,12 +75,12 @@ set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
 find_package(GFLAGS REQUIRED)
 
 execute_process(
-    COMMAND bash -c "grep \"namespace [_A-Za-z0-9]\\+ {\" ${GFLAGS_INCLUDE_PATH}/gflags/gflags_declare.h | head -1 | awk '{print $2}' | tr -d '\n'"
+    COMMAND bash -c "grep \"namespace [_A-Za-z0-9]\\+ {\" ${gflags_INCLUDE_DIR}/gflags/gflags_declare.h | head -1 | awk '{print $2}' | tr -d '\n'"
     OUTPUT_VARIABLE GFLAGS_NS
 )
 if(${GFLAGS_NS} STREQUAL "GFLAGS_NAMESPACE")
     execute_process(
-        COMMAND bash -c "grep \"#define GFLAGS_NAMESPACE [_A-Za-z0-9]\\+\" ${GFLAGS_INCLUDE_PATH}/gflags/gflags_declare.h | head -1 | awk '{print $3}' | tr -d '\n'"
+        COMMAND bash -c "grep \"#define GFLAGS_NAMESPACE [_A-Za-z0-9]\\+\" ${gflags_INCLUDE_DIR}/gflags/gflags_declare.h | head -1 | awk '{print $3}' | tr -d '\n'"
         OUTPUT_VARIABLE GFLAGS_NS
     )
 endif()
@@ -144,12 +144,13 @@ endif()
 
 find_package(Protobuf REQUIRED)
 find_package(Threads REQUIRED)
+find_package(leveldb REQUIRED)
 
-find_path(LEVELDB_INCLUDE_PATH NAMES leveldb/db.h)
-find_library(LEVELDB_LIB NAMES leveldb)
-if ((NOT LEVELDB_INCLUDE_PATH) OR (NOT LEVELDB_LIB))
-    message(FATAL_ERROR "Fail to find leveldb")
-endif()
+# find_path(LEVELDB_INCLUDE_PATH NAMES leveldb/db.h)
+# find_library(LEVELDB_LIB NAMES leveldb)
+# if ((NOT LEVELDB_INCLUDE_PATH) OR (NOT LEVELDB_LIB))
+#     message(FATAL_ERROR "Fail to find leveldb")
+# endif()
 
 if(WITH_GLOG)
     find_path(GLOG_INCLUDE_PATH NAMES glog/logging.h)
@@ -185,24 +186,25 @@ endif()
 find_package(OpenSSL)
 
 include_directories(
-        ${GFLAGS_INCLUDE_PATH}
-        ${PROTOBUF_INCLUDE_DIRS}
-        ${LEVELDB_INCLUDE_PATH}
-        ${OPENSSL_INCLUDE_DIR}
+        ${gflags_INCLUDE_DIR}
+        ${protobuf_INCLUDE_DIRS}
+        ${leveldb_INCLUDE_DIR}
+        ${OpenSSL_INCLUDE_DIR}
         )
 
 set(DYNAMIC_LIB
-    ${GFLAGS_LIBRARY}
-    ${PROTOBUF_LIBRARIES}
-    ${LEVELDB_LIB}
+    ${gflags_LIBRARIES}
+    ${protobuf_LIBRARIES}
+    ${leveldb_LIBRARIES}
     ${PROTOC_LIB}
     ${CMAKE_THREAD_LIBS_INIT}
     ${THRIFT_LIB}
     ${THRIFTNB_LIB}
-    ${OPENSSL_CRYPTO_LIBRARY}
+    ${OpenSSL_LIBRARIES}
     dl
     z)
 
+
 if(WITH_MESALINK)
     list(APPEND DYNAMIC_LIB ${MESALINK_LIB})
 else()
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index ee616eb1..c6415e46 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -31,7 +31,7 @@ add_dependencies(SOURCES_LIB PROTO_LIB)
 set_property(TARGET ${SOURCES_LIB} PROPERTY POSITION_INDEPENDENT_CODE 1)
 set_property(TARGET ${BUTIL_LIB} PROPERTY POSITION_INDEPENDENT_CODE 1)
 
-add_library(brpc-shared SHARED $<TARGET_OBJECTS:BUTIL_LIB> 
+add_library(brpc-shared SHARED $<TARGET_OBJECTS:BUTIL_LIB>
                                $<TARGET_OBJECTS:SOURCES_LIB>
                                $<TARGET_OBJECTS:PROTO_LIB>)
 add_library(brpc-static STATIC $<TARGET_OBJECTS:BUTIL_LIB>
@@ -54,13 +54,13 @@ SET_TARGET_PROPERTIES(brpc-shared PROPERTIES OUTPUT_NAME brpc CLEAN_DIRECT_OUTPU
 
 # for protoc-gen-mcpack
 set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/output/bin)
-    
+
 set(protoc_gen_mcpack_SOURCES
     ${PROJECT_SOURCE_DIR}/src/mcpack2pb/generator.cpp
  )
 add_executable(protoc-gen-mcpack ${protoc_gen_mcpack_SOURCES})
 target_link_libraries(protoc-gen-mcpack brpc-shared)
-    
+
 #install directory
 install(TARGETS brpc-shared
         RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
diff --git a/src/brpc/protocol.cpp b/src/brpc/protocol.cpp
index 3e2c7172..33b79d62 100644
--- a/src/brpc/protocol.cpp
+++ b/src/brpc/protocol.cpp
@@ -54,7 +54,7 @@ const size_t MAX_PROTOCOL_SIZE = 128;
 struct ProtocolEntry {
     butil::atomic<bool> valid;
     Protocol protocol;
-    
+
     ProtocolEntry() : valid(false) {}
 };
 struct ProtocolMap {
@@ -187,7 +187,7 @@ ProtocolType StringToProtocolType(const butil::StringPiece& name,
 const char* ProtocolTypeToString(ProtocolType type) {
     // Force init of s_protocol_name.
     GlobalInitializeOrDie();
-    
+
     const Protocol* p = FindProtocol(type);
     if (p != NULL) {
         return p->name;
@@ -199,11 +199,11 @@ BUTIL_FORCE_INLINE bool ParsePbFromZeroCopyStreamInlined(
     google::protobuf::Message* msg,
     google::protobuf::io::ZeroCopyInputStream* input) {
     google::protobuf::io::CodedInputStream decoder(input);
-    // Remove the limit inside pb so that it never conflicts with -max_body_size 
+    // Remove the limit inside pb so that it never conflicts with -max_body_size
     // According to source code of pb, SetTotalBytesLimit is not a simple set,
     // avoid calling the function when the limit is definitely unreached.
     if (PB_TOTAL_BYETS_LIMITS < FLAGS_max_body_size) {
-        decoder.SetTotalBytesLimit(INT_MAX, -1);
+        decoder.SetTotalBytesLimit(INT_MAX);
     }
     return msg->ParseFromCodedStream(&decoder) && decoder.ConsumedEntireMessage();
 }
